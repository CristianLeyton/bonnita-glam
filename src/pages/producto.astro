---
import Layout from "@layouts/Layout.astro";
import ArrowRIcon from "@components/resources/icons/ArrowRIcon.astro";
---

<Layout title="Producto | Bonnita Glam MakeUp">
  <section
    class="flex flex-col md:flex-row justify-center items-center gap-6 container mx-auto p-4"
  >
    <article
      class="h-fit w-fit justify-between bg-secondary/60 dark:bg-rose-200/80 dark:text-gray-800 rounded-lg py-4 px-4 flex flex-col gap-1 items-center shadow"
    >
      <img
        id="productImage"
        src=""
        alt=""
        class="min-h-80 w-80 object-cover rounded-md animate-pulse bg-gray-200"
      />
    </article>
    <article class="w-full md:w-[60%] justify-between flex flex-col gap-3">
      <div class="flex text-primary">
        <a
          href="/productos"
          class="text-xs rounded-full bg-pink-100 border dark:bg-rose-200 dark:border-rose-300/80 border-pink-200 w-fit px-2 py-0.5 hover:-translate-y-0.5 transition"
          >Todos los productos</a
        >
        <ArrowRIcon />
        <a
          href=""
          id="productCategory"
          class="text-xs rounded-full bg-pink-100 border dark:bg-rose-200 dark:border-rose-300/80 border-pink-200 w-fit px-2 py-0.5 hover:-translate-y-0.5 transition"
        ></a>
      </div>

      <main
        class="bg-secondary/60 dark:bg-rose-200/80 dark:text-gray-800 rounded-lg py-4 px-4 h-fit shadow flex flex-col gap-2 productCard"
      >
        <h3 id="productTitle" class="font-bold text-xl bg-gray-200 min-h-6 rounded animate-pulse"></h3>
        <div class="flex text-primary gap-2 pb-3 border-b border-rose-200">
          <span
            class="text-xs rounded-full bg-pink-100 border dark:bg-rose-200 dark:border-rose-300/80 border-pink-200 w-fit px-2 py-0.5"
          >
            Disponibles: <span id="productCant"></span></span
          >
          <span
            class="text-xs rounded-full bg-pink-100 border dark:bg-rose-200 dark:border-rose-300/80 border-pink-200 w-fit px-2 py-0.5"
          >
            Código de producto: #<span id="productSKU"></span>
          </span>
        </div>
        <p id="productDescription" class="pb-3 border-b border-rose-200 bg-gray-200 min-h-44 rounded animate-pulse w-full"></p>

        <div id="footerProductPage" class="flex justify-between items-center">
          <p id="productPrice" class="font-bold text-xl bg-gray-200 min-h-6 rounded animate-pulse w-full"></p>
        </div>
      </main>
    </article>
  </section>
</Layout>

<script>

  document.addEventListener("astro:page-load", () => {
    const urlApi = "https://admin.bonnitaglammakeup.com.ar";
    const url = new URL(window.location.href);
    const slug = url.searchParams.get("product_slug");
    let productData: any = {};

    const localWishList = getWishList();

    function getWishList() {
      //Si es la primera vez y no existe la lista de deseos, la creo
      //@ts-ignore
      let WishList = JSON.parse(localStorage.getItem("wishListBonitaGlam")) || [];
      if (WishList.length === 0) {
        localStorage.setItem("wishListBonitaGlam", JSON.stringify([])); //Comprueba si ya existe o no, y la crea
      }
      return WishList;
    }

    //console.log(localWishList);

    //Funcion para agregar un producto a la lista
    function setWishList() {
      localStorage.setItem("wishListBonitaGlam", JSON.stringify(localWishList));
    }

    fetch(`${urlApi}/api/products/${slug}`)
      .then((response) => response.json())
      .then((data) => {
        productData = data.data;
        console.log(productData);
        drawProductPage();
      })
      .catch((error) => {
        console.error("Error al obtener producto:", error);
      });

    function drawProductPage() {
      const article = document.querySelector(".productCard") as HTMLElement;
      const quantity = productData.quantity;
      const footerProductPage = document.getElementById("footerProductPage");
      const productImage = document.getElementById("productImage");
      const productTitle = document.getElementById("productTitle");
      const categoryProduct = document.getElementById("productCategory");
      const productCant = document.getElementById("productCant");
      const productSKU = document.getElementById("productSKU");
      const productPrice = document.getElementById("productPrice");
      const productDescription = document.getElementById("productDescription");
      //@ts-ignore
      productImage.src = `${urlApi}/storage_public/${productData.urlImage}`;
      productImage?.classList.remove('bg-gray-200', 'animate-pulse');
      //@ts-ignore
      productImage.alt = productData.name;
      //@ts-ignore
      productTitle.textContent = productData.name;
      productTitle?.classList.remove('bg-gray-200', 'animate-pulse', 'min-h-6');
      //@ts-ignore
      categoryProduct.textContent = productData.categorie.name;
      //@ts-ignore
      categoryProduct.href = `/productos?category_slug=${productData.categorie.slug}`;
      //@ts-ignore
      categoryProduct.textContent = productData.categorie.name;
      //@ts-ignore
      productCant.textContent = productData.quantity;
      //@ts-ignore
      productSKU.textContent = productData.sku;
      //@ts-ignore
      productPrice.textContent = `$${productData.price}`;
      productPrice?.classList.remove('bg-gray-200', 'animate-pulse', 'min-h-6');
      //@ts-ignore
      productDescription.textContent = productData.description || "Sin descripción";
      productDescription?.classList.remove('bg-gray-200', 'animate-pulse', 'min-h-44');
      article.dataset.color = productData.colors && productData.colors.length > 0 ? productData.colors[0].hex_code : "";
      article.dataset.colorName = productData.colors && productData.colors.length > 0 ? productData.colors[0].name : "";

      // Botón (agregar al pedido)
      const button = document.createElement("button");
      button.className =
        "btnAddToWishList bg-red-700 text-secondary cursor-pointer p-1 rounded hover:-translate-y-0.5 transition";
      button.title = "Agregar al pedido";
      button.addEventListener("click", (e) => {
        //@ts-ignore
        const card = e.target.closest(".productCard");

        let item = {
          title: productData.name,
          image: `${urlApi}/storage_public/${productData.urlImage}`,
          price: productData.price,
          sku: productData.sku,
          color: card.getAttribute("data-color"),
          colorName: card.getAttribute("data-color-name"),
          maxQuantity: productData.quantity,
          quantity: 1,
        };

        // Compara por título y color
        const existItem = localWishList.find(
          (itemList: any) =>
            itemList.title === item.title && itemList.color === item.color
        );

        if (existItem) {
          if (existItem.quantity < quantity) {
            existItem.quantity++;
            // Enviar el evento a nivel de `window`
            setWishList();
            window.dispatchEvent(
              new CustomEvent("user:addedProduct", {
                detail: "Se agregó uno más al pedido. 😀",
              })
            );
          } else {
            window.dispatchEvent(
              new CustomEvent("user:addedProduct", {
                detail:
                  "Solo tenemos " +
                  quantity +
                  " unidades de " +
                  item.title +
                  ". 😢",
              })
            );
          }
          //console.log("Aumentada la cantidad de " + item.title);
        } else {
          localWishList.push(item);
          //console.log("Añadido " + item.title);
          // Enviar el evento a nivel de `window`
          setWishList();
          window.dispatchEvent(
            new CustomEvent("user:addedProduct", {
              detail: item.title + " añadido al pedido. 🎉",
            })
          );
        }
      });

      // SVG (corazón)
      const svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
      svg.setAttribute("xmlns", "http://www.w3.org/2000/svg");
      svg.setAttribute("viewBox", "0 0 24 24");
      svg.setAttribute("class", "size-8 sm:size-6");
      svg.setAttribute("style", "fill: currentColor;transform: ;msFilter:;");

      const path = document.createElementNS(
        "http://www.w3.org/2000/svg",
        "path"
      );
      path.setAttribute(
        "d",
        "M20.205 4.791a5.938 5.938 0 0 0-4.209-1.754A5.906 5.906 0 0 0 12 4.595a5.904 5.904 0 0 0-3.996-1.558 5.942 5.942 0 0 0-4.213 1.758c-2.353 2.363-2.352 6.059.002 8.412L12 21.414l8.207-8.207c2.354-2.353 2.355-6.049-.002-8.416z"
      );

      svg.appendChild(path);
      button.appendChild(svg);
      footerProductPage?.appendChild(button);
    
      // Coloresif (productData.colors && productData.colors.length > 0) {
        const colorContainer = document.createElement("div");
        const textColor = document.createElement("span");
        textColor.className = "text-sm font-semibold text-primary";
        textColor.textContent = "Elegir color:";
        colorContainer.appendChild(textColor);
        colorContainer.className = "relative w-full text-sm";
        article.dataset.color = productData.colors[0].hex_code;
        article.dataset.colorName = productData.colors[0].name;

        // Estado: color seleccionado (por defecto el primero)
        let selectedColor = productData.colors[0];

        // Botón (preview actual)
        const dropdownBtn = document.createElement("button");
        dropdownBtn.type = "button";
        dropdownBtn.className = `
    flex items-center justify-between w-full py-2 rounded cursor-pointer hover:text-primary
  `;

        const colorCircle = document.createElement("span");
        colorCircle.className =
          "inline-block size-8 rounded hover:-translate-y-0.5 transition";
        colorCircle.style.backgroundColor = selectedColor.hex_code;

        const colorLabel = document.createElement("span");
        colorLabel.className = `font-bold`;
        colorLabel.textContent = selectedColor.name;

        dropdownBtn.appendChild(colorLabel);
        dropdownBtn.appendChild(colorCircle);

        // Dropdown (lista de opciones)
        const dropdownList = document.createElement("ul");
        dropdownList.className = `
    absolute z-10 w-full mt-1 bg-secondary border rounded shadow
    max-h-40 overflow-y-auto hidden
  `;

        productData.colors.forEach((color: any) => {
          const item = document.createElement("li");
          item.className = `
      flex items-center justify-between px-3 py-2 cursor-pointer hover:bg-gray-200
    `;

          const itemCircle = document.createElement("span");
          itemCircle.className = "inline-block size-8 rounded";
          itemCircle.style.backgroundColor = color.hex_code;

          const itemLabel = document.createElement("span");
          itemLabel.textContent = color.name;

          item.appendChild(itemLabel);
          item.appendChild(itemCircle);

          // Seleccionar color al hacer click
          item.addEventListener("click", () => {
            selectedColor = color;

            // Actualizar preview
            colorCircle.style.backgroundColor = color.hex_code;
            colorLabel.textContent = color.name;

            // Actualizar dataset del artículo
            article.dataset.color = color.hex_code;
            article.dataset.colorName = color.name;

            // Cerrar el dropdown
            dropdownList.classList.add("hidden");

            //console.log("Color seleccionado:", color.name, color.hex_code);
          });

          dropdownList.appendChild(item);
        });

        // Toggle del dropdown
        dropdownBtn.addEventListener("click", (e) => {
          e.stopPropagation(); // Evitar que se cierre inmediatamente
          dropdownList.classList.toggle("hidden");
        });

        // Cerrar el dropdown si se hace click fuera
        document.addEventListener("click", () => {
          dropdownList.classList.add("hidden");
        });

        // Ensamblar
        colorContainer.appendChild(dropdownBtn);
        colorContainer.appendChild(dropdownList);
        article.insertBefore(colorContainer, footerProductPage);
      }

    
  });
</script>
